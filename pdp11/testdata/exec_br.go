// Copyright 2023 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
)

func main() {
	var b bytes.Buffer
	fmt.Fprintf(&b, "// generated by go run exec_br.go\n")
	for _, br := range branches {
		for i, cond := range conds {
			n, z, v, c := i&8 != 0, i&4 != 0, i&2 != 0, i&1 != 0
			fmt.Fprintf(&b, "\nccc\n%s\n%s 10020\nnow", cond, br)
			if shouldBranch(br, n, z, v, c) {
				fmt.Fprintf(&b, " pc=010020")
			} else if i == 0 {
				fmt.Fprintf(&b, " ~")
			}
			if i != 0 {
				fmt.Fprintf(&b, " nzvc=%04b", i)
			}
			fmt.Fprintf(&b, "\n")
		}
	}
	if err := os.WriteFile("exec_br.txt", b.Bytes(), 0666); err != nil {
		log.Fatal(err)
	}
}

func shouldBranch(name string, n, z, v, c bool) bool {
	switch name {
	case "br":
		return true
	case "bcc":
		return !c
	case "bcs":
		return c
	case "beq":
		return z
	case "bne":
		return !z
	case "bpl":
		return !n
	case "bmi":
		return n
	case "bvc":
		return !v
	case "bvs":
		return v
	case "bge":
		return n == v
	case "blt":
		return n != v
	case "bgt":
		return !z && n == v
	case "ble":
		return z || n != v
	case "bhi":
		return !c && !z
	case "blos":
		return c || z
	}
	panic("unreachable")
}

var conds = []string{
	"nop",
	"sec",
	"sev",
	"sevc",
	"sez",
	"sezc",
	"sezv",
	"sezvc",
	"sen",
	"senc",
	"senv",
	"senvc",
	"senz",
	"senzc",
	"senzv",
	"scc",
}

var branches = []string{
	"br",
	"bcc",
	"bcs",
	"beq",
	"bne",
	"bpl",
	"bmi",
	"bvc",
	"bvs",
	"bge",
	"blt",
	"bgt",
	"ble",
	"bhi",
	"blos",
}
